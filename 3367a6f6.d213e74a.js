(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{109:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/spring_core_diagram_rev3-b49544336473caa2e788d7e99c7e42c5.png"},62:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return l})),n.d(t,"rightToc",(function(){return b})),n.d(t,"default",(function(){return p}));var r=n(2),a=n(6),i=(n(0),n(77)),c={id:"featureGenericCrudService",title:"Generic CRUD Service",sidebar_label:"Generic CRUD Service"},l={unversionedId:"featureGenericCrudService",id:"featureGenericCrudService",isDocsHomePage:!1,title:"Generic CRUD Service",description:"Introduction",source:"@site/docs/featureGenericCrudService.md",slug:"/featureGenericCrudService",permalink:"/docs/featureGenericCrudService",editUrl:"https://github.com/yazilim-vip/spring-vip-wiki/blob/master/docs/featureGenericCrudService.md",version:"current",sidebar_label:"Generic CRUD Service",sidebar:"someSidebar",previous:{title:"Usage",permalink:"/docs/gettingStartedUsage"},next:{title:"Generic CRUD Rest",permalink:"/docs/featureGenericCrudRest"}},b=[{value:"Introduction",id:"introduction",children:[]},{value:"Methods",id:"methods",children:[]},{value:"Exceptions",id:"exceptions",children:[]},{value:"Example Usage",id:"example-usage",children:[]}],o={rightToc:b};function p(e){var t=e.components,c=Object(a.a)(e,["components"]);return Object(i.b)("wrapper",Object(r.a)({},o,c,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h2",{id:"introduction"},"Introduction"),Object(i.b)("p",null,"You can manage the flow from the Entity level to the REST or View (MVC's View) level with the SpringVIP Library. "),Object(i.b)("p",null,Object(i.b)("img",{alt:"res",src:n(109).default})),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"JPARepository"),", ",Object(i.b)("inlineCode",{parentName:"p"},"ICrudService")," and ",Object(i.b)("inlineCode",{parentName:"p"},"ACrudServiceImpl")," components could be seen on the figure above already provided by library and Spring Framework to the developer."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"JPARepository")," which is a generic repository, already provided by ",Object(i.b)("inlineCode",{parentName:"li"},"Sping Data"),". "),Object(i.b)("li",{parentName:"ul"},"In additon to that ",Object(i.b)("inlineCode",{parentName:"li"},"ICrudService")," and ",Object(i.b)("inlineCode",{parentName:"li"},"ACrudServiceImpl")," provided by ",Object(i.b)("inlineCode",{parentName:"li"},"SpringVIP")," library.")),Object(i.b)("p",null,"The core feature provided by ",Object(i.b)("inlineCode",{parentName:"p"},"SpringVIP")," library is that  ",Object(i.b)("inlineCode",{parentName:"p"},"Generic CRUD Service")," implementation for service layer. ",Object(i.b)("inlineCode",{parentName:"p"},"Generic CRUD Service")," consists of two components."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"ICrudService")," provides definiitons of generic CRUD methods for entities"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"ACrudServiceImpl")," implements methods defined in ",Object(i.b)("inlineCode",{parentName:"li"},"ICrudService"),"  in a generic manner.")),Object(i.b)("p",null,"Services extends to ACrudServiceImpl inherits methods from SpringVIP Library, like create, read, update, delete methods and so on. Thus developers can use boilerplate service methods quickly."),Object(i.b)("h2",{id:"methods"},"Methods"),Object(i.b)("p",null,"All DB operations are done via ",Object(i.b)("inlineCode",{parentName:"p"},"JPARepository")," in ",Object(i.b)("inlineCode",{parentName:"p"},"Generic CRUD Service"),". All exceptions occurred on ",Object(i.b)("inlineCode",{parentName:"p"},"JPARepository")," layer is handled by ",Object(i.b)("inlineCode",{parentName:"p"},"Generic CRUD Service")," then an exception thrown. There are some methods for basic CRUD operations are included in ",Object(i.b)("inlineCode",{parentName:"p"},"Generic CRUD Service"),". They are;"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"GetAll: To get all records on the database"),Object(i.b)("li",{parentName:"ul"},"GetById: To get record that matching id",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"Id passed as parameter to select ",Object(i.b)("strong",{parentName:"li"},"must not")," be null"))),Object(i.b)("li",{parentName:"ul"},"Save: To save entity",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"Entity passed as parameter to save ",Object(i.b)("strong",{parentName:"li"},"must not")," be null"))),Object(i.b)("li",{parentName:"ul"},"Create: To create a record by entity"),Object(i.b)("li",{parentName:"ul"},"Update: To update a record by entity",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"Entity passed as parameter to update ",Object(i.b)("strong",{parentName:"li"},"must")," be exists on db"))),Object(i.b)("li",{parentName:"ul"},"Delete: To delete a record by entity",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"Entity passed as parameter to save ",Object(i.b)("strong",{parentName:"li"},"must not")," be null"))),Object(i.b)("li",{parentName:"ul"},"DeleteById: To delete record by Id",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"Id passed as parameter to select ",Object(i.b)("strong",{parentName:"li"},"must not")," be null")))),Object(i.b)("h2",{id:"exceptions"},"Exceptions"),Object(i.b)("p",null,"There are some general exceptions can be thrown by generic CRUD service implementation (",Object(i.b)("inlineCode",{parentName:"p"},"ACrudServiceImpl"),"). "),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"DatabaseCreateException"),": indicates there is an error on ",Object(i.b)("inlineCode",{parentName:"li"},"Create")," operation."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"DatabaseDeleteException"),": indicates there is an error on ",Object(i.b)("inlineCode",{parentName:"li"},"Delete")," operation."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"DatabaseReadException"),": indicates there is an error on ",Object(i.b)("inlineCode",{parentName:"li"},"Read")," operation."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"DatabaseSaveException"),": indicates there is an error on ",Object(i.b)("inlineCode",{parentName:"li"},"Save")," operation."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"DatabaseUpdateException"),": indicates there is an error on ",Object(i.b)("inlineCode",{parentName:"li"},"Update")," operation.")),Object(i.b)("h2",{id:"example-usage"},"Example Usage"),Object(i.b)("p",null,"To use ",Object(i.b)("inlineCode",{parentName:"p"},"Generic CRUD Service")," feature you need following; \\\nLet's assume you have a table named as ",Object(i.b)("inlineCode",{parentName:"p"},"User")," on database"),Object(i.b)("p",null,"Create an Entity class"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),"@Entity\npublic class User {\n    @Id\n    private int id\n    ....\n    \n}\n")),Object(i.b)("p",null,"Create a new repository "),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),"public interface IUserRepo<User, Integer> {\n    ....\n}\n")),Object(i.b)("p",null,"Create a new service interface"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),"public interface IUserService extends ICrudService <User, Integer> {\n    ....\n}\n")),Object(i.b)("p",null,"Then implment service created on previous step"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),"@Service\npublic class UserServiceImpl extends ACrudServiceImpl<User, Integer> implements IUserService {\n\n    private final IUserRepo  Generic CRUD Service ExampleuserRepo;\n\n    public UserServiceImpl(IUserRepo userRepo) {\n        this.userRepo = userRepo;\n    }\n\n    @Override\n    protected JpaRepository<User, Integer> getRepository() {\n        return userRepo;\n    }\n\n    @Override\n    protected Class<User> getClassOfEntity() {\n        return User.class;\n    }\n\n    @Override\n    protected Integer getId(User entity) {\n        return entity.getId();\n    }\n\n    ....\n}\n\n")))}p.isMDXComponent=!0}}]);